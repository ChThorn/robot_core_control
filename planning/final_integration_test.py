#!/usr/bin/env python3
"""
Final integration test for visualization with planning system.
"""

import sys
import os
import numpy as np

# Add parent directories to path
current_dir = os.path.dirname(__file__)
kinematics_dir = os.path.join(current_dir, '..', 'robot_kinematics')
sys.path.append(kinematics_dir)

from robot_controller import RobotController
from visualize import RobotVisualizer
from motion_planning import MotionPlanner

def test_final_integration():
    """Final comprehensive test of visualization with planning."""
    print("üéØ FINAL Integration Test: Visualization + Planning")
    print("=" * 60)
    
    try:
        # Initialize components
        robot_controller = RobotController()
        visualizer = RobotVisualizer(robot_controller)
        motion_planner = MotionPlanner(robot_controller)
        
        print("‚úÖ All components initialized successfully")
        
        # Test 1: Basic robot visualization
        print("\n1Ô∏è‚É£  Basic Robot Visualization")
        q_demo = np.array([0.3, 0.2, -0.3, 0.1, 0.05, 0.0])
        
        fig = visualizer.plot_robot_configuration_matplotlib(
            q_demo, 
            show_workspace=True,
            save_path="final_robot_config.png"
        )
        
        fig_interactive = visualizer.plot_robot_configuration_plotly(
            q_demo,
            show_workspace=True,
            save_path="final_robot_interactive.html"
        )
        
        print("   ‚úÖ Robot configuration visualized")
        
        # Test 2: Joint space planning with visualization
        print("\n2Ô∏è‚É£  Joint Space Planning + Visualization")
        q_start = np.zeros(6)
        q_goal = np.array([0.5, 0.3, -0.4, 0.2, 0.1, 0.0])
        
        joint_path = motion_planner.plan_joint_path(q_start, q_goal)
        
        if joint_path and len(joint_path) > 0:
            print(f"   ‚úÖ Joint path planned: {len(joint_path)} waypoints")
            
            # Visualize trajectory
            fig_traj, fig_3d = visualizer.plot_trajectory_comparison(
                joint_path,
                save_path="final_joint_trajectory.png"
            )
            
            # Visualize start and end configurations
            fig_start = visualizer.plot_robot_configuration_matplotlib(
                q_start, save_path="final_start_config.png"
            )
            
            fig_end = visualizer.plot_robot_configuration_matplotlib(
                q_goal, save_path="final_end_config.png"
            )
            
            print("   ‚úÖ Joint trajectory visualized")
        else:
            print("   ‚ö†Ô∏è  Joint path planning returned empty result")
        
        # Test 3: Cartesian space planning with visualization
        print("\n3Ô∏è‚É£  Cartesian Space Planning + Visualization")
        
        # Use simple reachable poses
        start_pose = np.array([0.4, 0.2, 0.4, 0, 0, 0])
        goal_pose = np.array([0.2, 0.4, 0.5, 0, 0, 0])
        
        try:
            cartesian_result = motion_planner.plan_cartesian_path(start_pose, goal_pose)
            
            if cartesian_result:
                print("   ‚úÖ Cartesian path planned successfully")
                
                # Create visualization
                start_T = np.eye(4)
                start_T[:3, 3] = start_pose[:3]
                q_vis, success = robot_controller.inverse_kinematics(start_T)
                
                if success:
                    # Create simple Cartesian path for visualization
                    cartesian_path = []
                    for i in range(8):
                        alpha = i / 7.0
                        waypoint = start_pose[:3] + alpha * (goal_pose[:3] - start_pose[:3])
                        cartesian_path.append(waypoint)
                    
                    fig_cart = visualizer.plot_robot_configuration_matplotlib(
                        q_vis,
                        cartesian_path=cartesian_path,
                        show_workspace=True,
                        save_path="final_cartesian_path.png"
                    )
                    
                    fig_cart_int = visualizer.plot_robot_configuration_plotly(
                        q_vis,
                        cartesian_path=cartesian_path,
                        show_workspace=True,
                        save_path="final_cartesian_interactive.html"
                    )
                    
                    print("   ‚úÖ Cartesian path visualized")
                else:
                    print("   ‚ö†Ô∏è  Could not compute IK for visualization")
            else:
                print("   ‚ö†Ô∏è  Cartesian path planning failed")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Cartesian planning error: {e}")
        
        # Test 4: Summary visualization
        print("\n4Ô∏è‚É£  Creating Summary Visualization")
        
        # Create a comprehensive view
        q_summary = np.array([0.4, 0.25, -0.35, 0.15, 0.075, 0.0])
        summary_path = [
            np.array([0.5, 0.1, 0.3]),
            np.array([0.3, 0.3, 0.4]),
            np.array([0.0, 0.4, 0.5]),
            np.array([-0.2, 0.3, 0.6]),
            np.array([-0.3, 0.1, 0.4])
        ]
        
        fig_summary = visualizer.plot_robot_configuration_plotly(
            q_summary,
            cartesian_path=summary_path,
            show_workspace=True,
            save_path="final_comprehensive_view.html"
        )
        
        print("   ‚úÖ Comprehensive visualization created")
        
        print("\n" + "=" * 60)
        print("üéâ FINAL INTEGRATION TEST SUCCESSFUL!")
        print("\nüìÅ Generated Files:")
        print("   ü§ñ Robot Configurations:")
        print("     - final_robot_config.png")
        print("     - final_start_config.png") 
        print("     - final_end_config.png")
        print("   üìä Trajectory Analysis:")
        print("     - final_joint_trajectory_joints.png")
        print("     - final_joint_trajectory_3d.png")
        print("   üõ§Ô∏è  Path Planning:")
        print("     - final_cartesian_path.png")
        print("   üåê Interactive Views:")
        print("     - final_robot_interactive.html")
        print("     - final_cartesian_interactive.html")
        print("     - final_comprehensive_view.html")
        
        print("\n‚úÖ CONCLUSION: Visualization system is fully integrated and working!")
        print("   Your 3D robot visualization can display:")
        print("   ‚úì Robot configurations with workspace boundaries")
        print("   ‚úì Joint trajectories and motion analysis") 
        print("   ‚úì Cartesian paths and planning results")
        print("   ‚úì Interactive 3D exploration")
        print("   ‚úì Complete integration with your planning system")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå FINAL TEST FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_final_integration()
    exit(0 if success else 1)
